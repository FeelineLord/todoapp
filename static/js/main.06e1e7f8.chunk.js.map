{"version":3,"sources":["components/Header.js","components/Todo.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","allCompleted","toggleAll","createTodo","useState","title","setTitle","className","placeholder","value","onChange","e","target","length","onKeyUp","keyCode","onBlur","type","id","checked","htmlFor","Todo","completed","deleteTodo","toggleTodo","editTodo","editing","setEditing","editedTitle","setEditedTitle","editor","React","createRef","useEffect","current","focus","handleBlur","todoState","onDoubleClick","onClick","autoFocus","ref","event","handleEnter","Footer","left","clearCompleted","exact","to","activeClassName","App","JSON","parse","localStorage","getItem","todos","setTodos","setAllCompleted","setLeft","activeTodos","filter","item","completedTodos","checkCompleted","checkLeft","currentArray","bool","count","normalizeIds","newTodos","map","index","setItem","stringify","newTitle","newTodo","currentTodos","path","render","todo","i","key","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06e1e7f8.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Header = ({ allCompleted, toggleAll, createTodo }) => {\r\n  const [title, setTitle] = useState('');\r\n\r\n  const changeTitle = (e) => {\r\n    if (e.target.value.length > 30) {\r\n      return ;\r\n    };\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const handleEnter = (e) => {\r\n    if (e.keyCode !== 13) {\r\n      return ;\r\n    }\r\n\r\n    createTodo(title);\r\n    setTitle('');\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    createTodo(title);\r\n    setTitle('');\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className=\"header\">\r\n      <h1>\r\n        todos\r\n      </h1>\r\n      <input\r\n      className=\"new-todo\"\r\n      placeholder=\"What needs to be done?\"\r\n      value={title}\r\n      onChange={changeTitle}\r\n      onKeyUp={handleEnter}\r\n      onBlur={handleBlur}\r\n      />\r\n      <input\r\n      type=\"checkbox\" \r\n      id=\"toggle-all\" \r\n      className=\"toggle-all\"\r\n      checked={allCompleted}\r\n      onChange={() => toggleAll(allCompleted)} />\r\n      <label\r\n      htmlFor=\"toggle-all\">\r\n        Mark all as complete\r\n      </label>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Todo = ({ title, id, completed, deleteTodo, toggleTodo, editTodo }) => {\r\n  const [ editing, setEditing ] = useState(false);\r\n  const [ editedTitle, setEditedTitle ] = useState(title);\r\n\r\n  const editor = React.createRef();\r\n\r\n  useEffect(() => {\r\n    setEditedTitle(title);\r\n  }, [title]);\r\n\r\n  useEffect(() => {\r\n    editor.current.focus();\r\n  }, [editing]);\r\n\r\n  const changeTodo = (e) => {\r\n    if (e.target.value.length > 30) {\r\n      return ;\r\n    };\r\n    setEditedTitle(e.target.value)\r\n  };\r\n\r\n  const handleEnter = (e, id) => {\r\n    if (e.keyCode !== 13) {\r\n      return ;\r\n    }\r\n    editTodo(id, editedTitle);\r\n    setEditing(false);\r\n  };\r\n\r\n  const handleBlur = (id) => {\r\n    editTodo(id, editedTitle);\r\n    setEditing(false);\r\n  };\r\n\r\n  const todoState = completed\r\n    ? 'completed'\r\n    : editing \r\n      ? 'editing'\r\n      : '';\r\n\r\n  return (\r\n    <li\r\n    className={todoState}>\r\n      <div\r\n      className=\"view\">\r\n        <input\r\n        type=\"checkbox\"\r\n        className=\"toggle\"\r\n        checked={completed}\r\n        id={'todo-' + id}\r\n        onChange={() => toggleTodo(id, completed)} />\r\n        <label\r\n        onDoubleClick={() => {setEditing(true)}}\r\n        onBlur={handleBlur}>\r\n          {title}\r\n        </label>\r\n        <button\r\n        type=\"button\"\r\n        className=\"destroy\"\r\n        onClick={() => deleteTodo(id)} />\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"edit\"\r\n        value={editedTitle}\r\n        autoFocus={true}\r\n        ref={editor}\r\n        onChange={changeTodo} \r\n        onBlur={() => handleBlur(id)}\r\n        onKeyUp={(event) => handleEnter(event, id)} />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Footer = ({ left, clearCompleted }) => (\r\n  <footer\r\n  className=\"footer\">\r\n    <span\r\n    className=\"todo-count\">\r\n      {\r\n      left + (left === 1 \r\n        ? ' item left'\r\n        : ' items left')\r\n      }\r\n    </span>\r\n\r\n    <ul\r\n      className=\"filters\">\r\n      <li>\r\n        <NavLink\r\n        exact to='/'\r\n        activeClassName='selected'>\r\n          All\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink\r\n        to='/active'\r\n        activeClassName='selected'>\r\n          Active\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink \r\n        to='/completed'\r\n        activeClassName='selected'>\r\n          Completed\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n\r\n    <button\r\n    type=\"button\"\r\n    className=\"clear-completed\"\r\n    onClick={clearCompleted}>\r\n      Clear completed\r\n    </button>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;","import React , { useState, useEffect } from 'react';\n\nimport Header from './components/Header';\nimport Todo from './components/Todo';\nimport Footer from './components/Footer';\nimport { Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  const [todos, setTodos] = useState(\n    JSON.parse(localStorage.getItem('todos')) || []\n  );\n\n  const [allCompleted, setAllCompleted] = useState(\n    false\n  );\n\n  const [left, setLeft] = useState(\n    0\n  );\n\n  let activeTodos = [ ...todos ].filter(item => {\n    return item.completed === false;\n  });\n\n  let completedTodos = [ ...todos ].filter(item => {\n    return item.completed === true;\n  });\n\n  useEffect(() => {\n    if (!todos.length) {\n      return ;\n    } \n\n    checkCompleted(todos);\n    checkLeft(todos);\n  });\n\n  useEffect(() => {\n    activeTodos = [ ...todos ].filter(item => {\n      return item.completed === false;\n    });\n    completedTodos = [ ...todos ].filter(item => {\n      return item.completed === true;\n    });\n  }, [todos]);\n\n  const createTodo = (title) => {\n    if (!title) {\n      return ;\n    };\n    const newTodo = {\n      title,\n      id: todos.length + 1,\n      completed: false\n    };\n\n    const currentTodos = [ ...todos, newTodo ];\n    setTodos([...currentTodos]);\n    setAllCompleted(false);\n    setLeft(left + 1);\n    localStorage.setItem('todos', JSON.stringify(currentTodos));\n  };\n\n  const toggleAll = (bool) => {\n    if (!todos.length) {\n      return ;\n    };\n    const newTodos = [ ...todos ].map(item => {\n      item.completed = !bool;\n      return item;\n    });\n\n    setTodos([...newTodos]);\n    setAllCompleted(!bool);\n    checkLeft(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n  };\n\n  const checkCompleted = (currentArray) => {\n    let bool = true;\n\n    if (!currentArray.length) {\n      bool = false\n    } else {\n      for (const item of currentArray) {\n        if (item.completed === false) {\n          bool = false;\n          break;\n        }\n      };\n    };\n    setAllCompleted(bool);\n  };\n\n  const checkLeft = (currentArray) => {\n    let count = 0;\n\n    for (const todo of currentArray) {\n      if (todo.completed === false) {\n        count ++;\n      };\n    };\n\n    setLeft(count);\n  };\n\n  const normalizeIds = (currentArray) => {\n    const newTodos = [ ...currentArray ].map((item, index) => {\n      item.id = index;\n      return item;\n    });\n\n    setTodos([ ...newTodos ]);\n  };\n\n  const deleteTodo = (id) => {    \n    const newTodos = [ ...todos ].filter(item => {\n      return item.id !== id;\n    });\n\n    setTodos([...newTodos]);\n    normalizeIds(newTodos);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    checkCompleted(newTodos);\n    checkLeft(newTodos);\n  };\n\n  const toggleTodo = (id, bool) => {\n    const newTodos = [ ...todos ].map(item => {\n      if (item.id === id) {\n        item.completed = !bool;\n      }\n      return item;\n    });\n    \n    setTodos([...newTodos]);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    checkCompleted(newTodos);\n    checkLeft(newTodos);\n  };\n\n  const editTodo = (id, newTitle) => {\n    if (!newTitle) {\n      deleteTodo(id);\n      return ;\n    };\n    const newTodos = [ ...todos ].map(item => {\n      if (item.id === id) {\n        item.title = newTitle;\n      }\n      return item;\n    });\n\n    setTodos([...newTodos]);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n  };\n\n  const clearCompleted = () => {\n    const newTodos = [ ...todos ].filter(item => {\n      return item.completed === false;\n    });\n\n    setTodos([...newTodos]);\n    setAllCompleted(false);\n    localStorage.setItem('todos', JSON.stringify(newTodos));\n    normalizeIds(newTodos);\n  };\n\n  return (\n    <section\n    className=\"todoapp\">\n      <Header\n      createTodo={createTodo}\n      allCompleted={allCompleted}\n      toggleAll={toggleAll}>\n      </Header>\n      <section\n      className=\"main\">\n        <ul\n        className=\"todo-list\">\n          <Switch>\n            <Route\n            path='/'\n            exact render={() => \n              todos.map((todo, i) => (\n                <Todo\n                key={JSON.stringify(todo) + i}\n                title={todo.title}\n                id={todo.id}\n                completed={todo.completed}\n                deleteTodo={deleteTodo}\n                toggleTodo={toggleTodo}\n                editTodo={editTodo}>\n                </Todo>\n              ))}>\n            </Route>\n            <Route\n            path='/active'\n            render={() => \n              activeTodos.map((todo, i) => (\n                <Todo\n                key={JSON.stringify(todo) + i}\n                title={todo.title}\n                id={todo.id}\n                completed={todo.completed}\n                deleteTodo={deleteTodo}\n                toggleTodo={toggleTodo}\n                editTodo={editTodo}>\n                </Todo>\n              ))}>\n            </Route>\n            <Route\n            path='/completed'\n            render={() => \n              completedTodos.map((todo, i) => (\n                <Todo\n                key={JSON.stringify(todo) + i}\n                title={todo.title}\n                id={todo.id}\n                completed={todo.completed}\n                deleteTodo={deleteTodo}\n                toggleTodo={toggleTodo}\n                editTodo={editTodo}>\n                </Todo>\n              ))}>\n            </Route>\n          </Switch>\n        </ul>\n      </section>\n      <Footer\n        left={left}\n        clearCompleted={clearCompleted}>\n      </Footer>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport './base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter\n    basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}